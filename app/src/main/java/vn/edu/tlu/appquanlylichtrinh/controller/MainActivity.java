package vn.edu.tlu.appquanlylichtrinh.controller;

import android.content.Intent;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Toast;
import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.google.android.material.bottomnavigation.BottomNavigationView;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import androidx.appcompat.widget.PopupMenu;
import vn.edu.tlu.appquanlylichtrinh.R;
import vn.edu.tlu.appquanlylichtrinh.model.Task;
import vn.edu.tlu.appquanlylichtrinh.controller.ScheduleAdapter;

public class MainActivity extends AppCompatActivity {

    private RecyclerView recyclerView;
    private ScheduleAdapter scheduleAdapter;
    private List<Object> displayList;
    private DatabaseReference databaseReference;
    private FirebaseAuth mAuth;

    // ƒê·ªãnh d·∫°ng ng√†y m√† b·∫°n l∆∞u tr√™n Firebase
    private final SimpleDateFormat firebaseDateFormat = new SimpleDateFormat("'Ng√†y' dd/MM/yyyy", Locale.getDefault());
    // ƒê·ªãnh d·∫°ng ƒë·ªÉ hi·ªÉn th·ªã Th·ª© trong tu·∫ßn
    private final SimpleDateFormat dayOfWeekFormat = new SimpleDateFormat("EEEE", new Locale("vi", "VN"));
    // ƒê·ªãnh d·∫°ng ƒë·ªÉ hi·ªÉn th·ªã ng√†y/th√°ng
    private final SimpleDateFormat dateMonthFormat = new SimpleDateFormat("d 'th√°ng' M", new Locale("vi", "VN"));


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);


        BottomNavigationView bottomNavigationView = findViewById(R.id.bottom_navigation);
        bottomNavigationView.setOnItemSelectedListener(item -> {
            int id = item.getItemId();

            if (id == R.id.navigation_calendar) {
                // üëâ M·ªü l·∫°i ch√≠nh MainActivity (l·ªãch tr√¨nh)
                Intent intent = new Intent(MainActivity.this, MainActivity.class);
                startActivity(intent);
                return true;
            } else if (id == R.id.nav_pomodoro) {
                // üëâ Chuy·ªÉn sang PomodoroActivity
                Intent intent = new Intent(MainActivity.this, PomodoroActivity.class);
                startActivity(intent);
                return true;
            }

            return false;
        });

        Toolbar toolbar = findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        mAuth = FirebaseAuth.getInstance();
        FirebaseUser currentUser = mAuth.getCurrentUser();

        recyclerView = findViewById(R.id.recyclerView);
        recyclerView.setLayoutManager(new LinearLayoutManager(this));

        displayList = new ArrayList<>();
        scheduleAdapter = new ScheduleAdapter(displayList, getSupportFragmentManager());
        recyclerView.setAdapter(scheduleAdapter);

        if (currentUser != null) {
            String userId = currentUser.getUid();
            databaseReference = FirebaseDatabase.getInstance().getReference("tasks").child(userId);
            fetchAndDisplayWeekSchedule(); // G·ªçi h√†m m·ªõi
        }
    }

    /**
     * H√†m ch√≠nh ƒë·ªÉ l·∫•y v√† hi·ªÉn th·ªã l·ªãch tr√¨nh cho 7 ng√†y t·ªõi.
     */
    private void fetchAndDisplayWeekSchedule() {
        // L·∫•y danh s√°ch 7 ng√†y t·ªõi
        List<Date> nextSevenDays = getNextSevenDays();

        databaseReference.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                // Nh√≥m t·∫•t c·∫£ c√°c task l·∫•y t·ª´ Firebase theo ng√†y
                Map<String, List<Task>> allTasksByDate = groupAllTasks(dataSnapshot);

                // X√¢y d·ª±ng danh s√°ch hi·ªÉn th·ªã cu·ªëi c√πng
                buildDisplayListForWeek(nextSevenDays, allTasksByDate);

                scheduleAdapter.notifyDataSetChanged();
            }

            @Override
            public void onCancelled(@NonNull DatabaseError databaseError) {
                Toast.makeText(MainActivity.this, "L·ªói t·∫£i d·ªØ li·ªáu", Toast.LENGTH_SHORT).show();
            }
        });
    }

    /**
     * Nh√≥m t·∫•t c·∫£ c√°c task t·ª´ Firebase v√†o m·ªôt Map v·ªõi key l√† ng√†y (dd/MM/yyyy).
     */
    private Map<String, List<Task>> groupAllTasks(DataSnapshot dataSnapshot) {
        Map<String, List<Task>> groupedTasks = new LinkedHashMap<>();
        SimpleDateFormat keyFormat = new SimpleDateFormat("dd/MM/yyyy", Locale.getDefault());

        for (DataSnapshot snapshot : dataSnapshot.getChildren()) {
            Task task = snapshot.getValue(Task.class);
            if (task != null && task.getDate() != null) {
                try {
                    // Chuy·ªÉn ƒë·ªïi chu·ªói ng√†y t·ª´ Firebase sang ƒë·ªëi t∆∞·ª£ng Date
                    Date taskDate = firebaseDateFormat.parse(task.getDate());
                    // T·∫°o m·ªôt key chu·∫©n (dd/MM/yyyy) ƒë·ªÉ nh√≥m
                    String dateKey = keyFormat.format(taskDate);

                    if (!groupedTasks.containsKey(dateKey)) {
                        groupedTasks.put(dateKey, new ArrayList<>());
                    }
                    groupedTasks.get(dateKey).add(task);
                } catch (ParseException e) {
                    e.printStackTrace(); // L·ªói n·∫øu ƒë·ªãnh d·∫°ng ng√†y tr√™n Firebase b·ªã sai
                }
            }
        }
        return groupedTasks;
    }

    /**
     * X√¢y d·ª±ng danh s√°ch hi·ªÉn th·ªã cu·ªëi c√πng, bao g·ªìm c·∫£ nh·ªØng ng√†y kh√¥ng c√≥ task.
     */
    private void buildDisplayListForWeek(List<Date> weekDays, Map<String, List<Task>> tasksByDate) {
        displayList.clear();
        SimpleDateFormat keyFormat = new SimpleDateFormat("dd/MM/yyyy", Locale.getDefault());

        for (Date day : weekDays) {
            // T·∫°o chu·ªói header cho ng√†y
            String dayHeader = dayOfWeekFormat.format(day) + ", " + dateMonthFormat.format(day);
            displayList.add(dayHeader); // Th√™m header v√†o danh s√°ch hi·ªÉn th·ªã

            // T√¨m c√°c task t∆∞∆°ng ·ª©ng v·ªõi ng√†y n√†y
            String dateKey = keyFormat.format(day);
            List<Task> tasksForDay = tasksByDate.get(dateKey);

            if (tasksForDay != null && !tasksForDay.isEmpty()) {
                // N·∫øu c√≥ task, th√™m ch√∫ng v√†o danh s√°ch hi·ªÉn th·ªã
                displayList.addAll(tasksForDay);
            }
            // N·∫øu kh√¥ng c√≥ task, kh√¥ng c·∫ßn l√†m g√¨ th√™m, ch·ªâ c√≥ header ng√†y ƒë∆∞·ª£c hi·ªÉn th·ªã.
        }
    }


    /**
     * T·∫°o ra m·ªôt danh s√°ch 7 ƒë·ªëi t∆∞·ª£ng Date, b·∫Øt ƒë·∫ßu t·ª´ h√¥m nay.
     */
    private List<Date> getNextSevenDays() {
        List<Date> dates = new ArrayList<>();
        Calendar calendar = Calendar.getInstance();
        for (int i = 0; i < 7; i++) {
            dates.add(calendar.getTime());
            calendar.add(Calendar.DAY_OF_YEAR, 1);
        }
        return dates;
    }
    // --- PH·∫¶N B·ªä THI·∫æU ƒê√É ƒê∆Ø·ª¢C TH√äM L·∫†I ·ªû ƒê√ÇY ---

    /**
     * Ph∆∞∆°ng th·ª©c n√†y ƒë∆∞·ª£c g·ªçi ƒë·ªÉ t·∫°o c√°c icon b√™n ph·∫£i tr√™n Toolbar.
     */
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.toolbar_menu, menu);
        return true;
    }

    /**
     * Ph∆∞∆°ng th·ª©c n√†y x·ª≠ l√Ω s·ª± ki·ªán click tr√™n t·∫•t c·∫£ c√°c icon c·ªßa Toolbar.
     */
    @Override
    public boolean onOptionsItemSelected(@NonNull MenuItem item) {
        int id = item.getItemId();


        if (id == android.R.id.home) {
            // X·ª≠ l√Ω click cho icon menu b√™n tr√°i (m·ªü Settings)
            Intent intent = new Intent(MainActivity.this, SettingsActivity.class);
            startActivity(intent);
            return true;

        } else if (id == R.id.action_history) {
            // Khi nh·∫•n n√∫t l·ªãch s·ª≠, g·ªçi h√†m hi·ªÉn th·ªã popup menu
            showFilterPopupMenu();
            return true;


        } else if (id == R.id.action_add) {
            // X·ª≠ l√Ω click cho icon th√™m b√™n ph·∫£i (m·ªü AddTask)
            Intent intent = new Intent(MainActivity.this, AddTaskActivity.class);
            startActivity(intent);
            return true;
        }

        return super.onOptionsItemSelected(item);


    }
    /**
     * H√†m ƒë·ªÉ hi·ªÉn th·ªã PopupMenu khi nh·∫•n v√†o icon l·ªãch s·ª≠.
     */
    private void showFilterPopupMenu() {
        // T√¨m View c·ªßa icon l·ªãch s·ª≠ ƒë·ªÉ PopupMenu hi·ªán ra ƒë√∫ng v·ªã tr√≠
        View menuItemView = findViewById(R.id.action_history);
        if (menuItemView == null) {
            // D·ª± ph√≤ng n·∫øu kh√¥ng t√¨m th·∫•y view (v√≠ d·ª• tr√™n c√°c thi·∫øt b·ªã c≈©)
            // L·∫•y view c·ªßa toolbar l√†m v·ªã tr√≠ neo
            menuItemView = findViewById(R.id.toolbar);
        }

        PopupMenu popup = new PopupMenu(this, menuItemView);
        // "Th·ªïi ph·ªìng" file menu c·ªßa ch√∫ng ta v√†o popup
        popup.getMenuInflater().inflate(R.menu.filter_menu, popup.getMenu());

        // --- Logic ƒë·ªÉ hi·ªÉn th·ªã d·∫•u tick ---
        // L·∫•y m·ª•c menu "Danh s√°ch"
        MenuItem listMenuItem = popup.getMenu().findItem(R.id.filter_as_list);
        // ƒê·∫∑t icon d·∫•u tick n·∫øu n√≥ ƒëang ƒë∆∞·ª£c ch·ªçn
        if (listMenuItem.isChecked()) {
            listMenuItem.setIcon(R.drawable.ic_check_24);
        } else {
            listMenuItem.setIcon(null);
        }

        // ƒê·∫∑t s·ª± ki·ªán l·∫Øng nghe khi m·ªôt m·ª•c trong popup ƒë∆∞·ª£c ch·ªçn
        popup.setOnMenuItemClickListener(menuItem -> {
            int itemId = menuItem.getItemId();

            if (itemId == R.id.filter_overdue || itemId == R.id.filter_incomplete || itemId == R.id.filter_complete) {
                // X·ª≠ l√Ω cho nh√≥m radio button
                menuItem.setChecked(true); // ƒê√°nh d·∫•u m·ª•c ƒë∆∞·ª£c ch·ªçn
                Toast.makeText(this, "ƒê√£ ch·ªçn: " + menuItem.getTitle(), Toast.LENGTH_SHORT).show();
                // TODO: Th√™m logic l·ªçc danh s√°ch ·ªü ƒë√¢y
                return true;
            } else if (itemId == R.id.filter_as_list) {
                // X·ª≠ l√Ω cho m·ª•c "Danh s√°ch"
                menuItem.setChecked(!menuItem.isChecked()); // ƒê·∫£o tr·∫°ng th√°i tick
                if (menuItem.isChecked()) {
                    menuItem.setIcon(R.drawable.ic_check_24);
                } else {
                    menuItem.setIcon(null);
                }
                // Gi·ªØ cho popup kh√¥ng b·ªã ƒë√≥ng l·∫°i ngay l·∫≠p t·ª©c ƒë·ªÉ ng∆∞·ªùi d√πng th·∫•y s·ª± thay ƒë·ªïi
                menuItem.setShowAsAction(MenuItem.SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW);
                menuItem.setActionView(new View(getApplicationContext()));
                menuItem.setOnActionExpandListener(new MenuItem.OnActionExpandListener() {
                    @Override
                    public boolean onMenuItemActionExpand(MenuItem item) {
                        return false;
                    }
                    @Override
                    public boolean onMenuItemActionCollapse(MenuItem item) {
                        return false;
                    }
                });
                return false; // Tr·∫£ v·ªÅ false ƒë·ªÉ menu kh√¥ng ƒë√≥ng l·∫°i
            }
            return false;
        });

        // Hi·ªÉn th·ªã popup menu
        popup.show();
    }
}
